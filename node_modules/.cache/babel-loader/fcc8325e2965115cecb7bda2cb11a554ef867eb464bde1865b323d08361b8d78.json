{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { checkLogin } from './Auth.actions';\nimport { addCartItem, checkOutCart, loadCart, removeCartItem } from './Cart.actions';\nconst initialState = {};\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    addToCartPersist(state, action) {\n      const {\n        item\n      } = action.payload;\n      const {\n        cart\n      } = state;\n      const isCartItem = cart.items.find(cartItem => cartItem.id === item.id);\n      if (isCartItem) {\n        state.items.quantity += action.payload.quantity;\n      }\n      if (!isCartItem) {\n        state.items.push(action.payload);\n      }\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(addCartItem.fulfilled, (state, action) => {\n      const {\n        item\n      } = action.payload;\n      state.items.push(item);\n    }).addCase(checkLogin.fulfilled, (state, action) => {\n      const {\n        cart\n      } = action.payload;\n      Object.assign(state, cart);\n    }).addCase(checkOutCart.fulfilled, (state, action) => {}).addCase(loadCart.fulfilled, (state, action) => {\n      const {\n        cart\n      } = action.payload;\n      Object.assign(state, cart);\n    }).addCase(removeCartItem.fulfilled, (state, action) => {\n      const {\n        item\n      } = action.payload;\n      state.items = state.items.filter(cartItem => cartItem.id !== item.id);\n    });\n  }\n});\nexport const {\n  addToCartPersist\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"names":["createSlice","checkLogin","addCartItem","checkOutCart","loadCart","removeCartItem","initialState","cartSlice","name","reducers","addToCartPersist","state","action","item","payload","cart","isCartItem","items","find","cartItem","id","quantity","push","extraReducers","builder","addCase","fulfilled","Object","assign","filter","actions","reducer"],"sources":["C:/Users/emilc/Desktop/Projects/portfolio_projects/FarmerErmilsWebshop/src/store/Cart.reducers.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\nimport { checkLogin } from './Auth.actions';\r\nimport { addCartItem, checkOutCart, loadCart, removeCartItem } from './Cart.actions';\r\n\r\nconst initialState = {};\r\n\r\nconst cartSlice = createSlice({\r\n    name: 'cart',\r\n    initialState,\r\n    reducers: {\r\n        addToCartPersist(state, action) {\r\n            const { item } = action.payload;\r\n            const { cart } = state;\r\n            const isCartItem = cart.items.find((cartItem) => cartItem.id === item.id);\r\n            if(isCartItem) {\r\n                state.items.quantity += action.payload.quantity;\r\n            }\r\n            if(!isCartItem){\r\n                state.items.push(action.payload);\r\n            }           \r\n        }\r\n\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(addCartItem.fulfilled, (state, action) => {\r\n                const { item } = action.payload;\r\n                state.items.push(item);\r\n            })\r\n            .addCase(checkLogin.fulfilled, (state, action) => {\r\n                const { cart } = action.payload;\r\n                Object.assign(state, cart);\r\n            })\r\n            .addCase(checkOutCart.fulfilled, (state, action) => {\r\n            })\r\n            .addCase(loadCart.fulfilled, (state, action) => {\r\n                const { cart } = action.payload;\r\n                Object.assign(state, cart);\r\n            })\r\n            .addCase(removeCartItem.fulfilled, (state, action) => {\r\n                const { item } = action.payload;\r\n                state.items = state.items.filter((cartItem) => cartItem.id !== item.id);\r\n            })\r\n    }\r\n});\r\n\r\nexport const { addToCartPersist } = cartSlice.actions;\r\nexport default cartSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,UAAU,QAAQ,gBAAgB;AAC3C,SAASC,WAAW,EAAEC,YAAY,EAAEC,QAAQ,EAAEC,cAAc,QAAQ,gBAAgB;AAEpF,MAAMC,YAAY,GAAG,CAAC,CAAC;AAEvB,MAAMC,SAAS,GAAGP,WAAW,CAAC;EAC1BQ,IAAI,EAAE,MAAM;EACZF,YAAY;EACZG,QAAQ,EAAE;IACNC,gBAAgBA,CAACC,KAAK,EAAEC,MAAM,EAAE;MAC5B,MAAM;QAAEC;MAAK,CAAC,GAAGD,MAAM,CAACE,OAAO;MAC/B,MAAM;QAAEC;MAAK,CAAC,GAAGJ,KAAK;MACtB,MAAMK,UAAU,GAAGD,IAAI,CAACE,KAAK,CAACC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,EAAE,KAAKP,IAAI,CAACO,EAAE,CAAC;MACzE,IAAGJ,UAAU,EAAE;QACXL,KAAK,CAACM,KAAK,CAACI,QAAQ,IAAIT,MAAM,CAACE,OAAO,CAACO,QAAQ;MACnD;MACA,IAAG,CAACL,UAAU,EAAC;QACXL,KAAK,CAACM,KAAK,CAACK,IAAI,CAACV,MAAM,CAACE,OAAO,CAAC;MACpC;IACJ;EAEJ,CAAC;EACDS,aAAa,EAAGC,OAAO,IAAK;IACxBA,OAAO,CACFC,OAAO,CAACvB,WAAW,CAACwB,SAAS,EAAE,CAACf,KAAK,EAAEC,MAAM,KAAK;MAC/C,MAAM;QAAEC;MAAK,CAAC,GAAGD,MAAM,CAACE,OAAO;MAC/BH,KAAK,CAACM,KAAK,CAACK,IAAI,CAACT,IAAI,CAAC;IAC1B,CAAC,CAAC,CACDY,OAAO,CAACxB,UAAU,CAACyB,SAAS,EAAE,CAACf,KAAK,EAAEC,MAAM,KAAK;MAC9C,MAAM;QAAEG;MAAK,CAAC,GAAGH,MAAM,CAACE,OAAO;MAC/Ba,MAAM,CAACC,MAAM,CAACjB,KAAK,EAAEI,IAAI,CAAC;IAC9B,CAAC,CAAC,CACDU,OAAO,CAACtB,YAAY,CAACuB,SAAS,EAAE,CAACf,KAAK,EAAEC,MAAM,KAAK,CACpD,CAAC,CAAC,CACDa,OAAO,CAACrB,QAAQ,CAACsB,SAAS,EAAE,CAACf,KAAK,EAAEC,MAAM,KAAK;MAC5C,MAAM;QAAEG;MAAK,CAAC,GAAGH,MAAM,CAACE,OAAO;MAC/Ba,MAAM,CAACC,MAAM,CAACjB,KAAK,EAAEI,IAAI,CAAC;IAC9B,CAAC,CAAC,CACDU,OAAO,CAACpB,cAAc,CAACqB,SAAS,EAAE,CAACf,KAAK,EAAEC,MAAM,KAAK;MAClD,MAAM;QAAEC;MAAK,CAAC,GAAGD,MAAM,CAACE,OAAO;MAC/BH,KAAK,CAACM,KAAK,GAAGN,KAAK,CAACM,KAAK,CAACY,MAAM,CAAEV,QAAQ,IAAKA,QAAQ,CAACC,EAAE,KAAKP,IAAI,CAACO,EAAE,CAAC;IAC3E,CAAC,CAAC;EACV;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEV;AAAiB,CAAC,GAAGH,SAAS,CAACuB,OAAO;AACrD,eAAevB,SAAS,CAACwB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}